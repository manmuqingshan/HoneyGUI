import os
import sys
import menu_config
from SCons.Script import *
import subprocess
import platform
import uuid

TOOL_ROOT="../tool/scons-tool"

sys.path = sys.path + [os.path.join(TOOL_ROOT, '')]
try:
    from building import *
except:
    print('Cannot found Scons tool root directory, please check TOOL_ROOT')
    exit(-1)

TARGET = 'gui.' + 'exe'


env = Environment(tools = ['mingw'],
                  CC=menu_config.CC, 
                  CFLAGS = menu_config.CFLAGS,
                  CXX = menu_config.CXX, 
                  CXXFLAGS = menu_config.CXXFLAGS,
                  LINKFLAGS = menu_config.LFLAGS)




RTK_GUI_ENGINE = os.path.abspath('./../realgui/')
GUI_EXAMPLE = os.path.abspath('./../example/')

PLATFORM = menu_config.PLATFORM

Export('PLATFORM')
Export('TOOL_ROOT')
Export('RTK_GUI_ENGINE')
Export('env')



print("CC: ", env['CC'])
print("CFLAGS: ", env['CFLAGS'])
print("CXXFLAGS: ", env['CXXFLAGS'])
print("LINKFLAGS: ", env['LINKFLAGS'])

print('TOOL ROOT = ' + TOOL_ROOT)
print('RTK GUI ENGINE ROOT = ' + RTK_GUI_ENGINE)


import subprocess

def compile_resource(rc_file, output_file):
    try:
        subprocess.run(['windres', rc_file, '-O', 'coff', '-o', output_file], check=True)
        print(f'Successfully compiled {rc_file} to {output_file}')
    except subprocess.CalledProcessError as e:
        print(f'An error occurred: {e}')
    except FileNotFoundError:
        print('windres command not found. Ensure MinGW is installed and windres is in the system PATH.')

compile_resource('version.rc', 'version.o')

# prepare building environment
objs = PrepareBuilding(env, TOOL_ROOT, has_libcpu=False)

# set spawn: save & load long param as temp file
def ourspawn(sh, escape, cmd, args, e):
    filename = str(uuid.uuid4())
    newargs = ' '.join(args[1:])
    cmdline = cmd + " " + newargs
    if (len(cmdline) > 16 * 1024):
        f = open(filename, 'w')
        f.write(' '.join(args[1:]).replace('\\', '/'))
        f.close()
        # exec
        cmdline = cmd + " @" + filename
    proc = subprocess.Popen(cmdline, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
        stderr=subprocess.PIPE, shell = False, env = e)
    data, err = proc.communicate()
    rv = proc.wait()
    def res_output(_output, _s):
        if len(_s):
            if isinstance(_s, str):
                _output(_s)
            elif isinstance(_s, bytes):
                _output(str(_s, 'UTF-8'))
            else:
                _output(str(_s))
    res_output(sys.stderr.write, err)
    res_output(sys.stdout.write, data)
    if os.path.isfile(filename):
        os.remove(filename)
    return rv
if platform.system() == 'Windows':
    env['SPAWN'] = ourspawn

# include app
objs.extend(SConscript(os.path.join(RTK_GUI_ENGINE, 'SConscript')))
objs.extend(SConscript(os.path.join(GUI_EXAMPLE, 'SConscript')))

env.Append(LIBS = [
    'mingw32',
    'user32',
    'gdi32',
    'winmm',
    'imm32',
    'ole32',
    'oleaut32',
    'version',
    'uuid',
    'advapi32',
    'setupapi',
    'shell32',
    'dinput8',
    'opengl32',
    'm'
])

# make a building
DoBuilding(TARGET, objs)
